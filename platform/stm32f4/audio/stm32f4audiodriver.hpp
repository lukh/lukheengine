/**
  ******************************************************************************
  * \file    stm32f4audiodriver.hpp
  * \author  Vivien Henry
  * \version V1.0
  * \date    17/12/2014
  *

Hardware Config for PWM :

  ******************************************************************************
  * \attention
  *
  ******************************************************************************
  */
	
/**
  \addtogroup AudioDriver
  @{
  */	


#ifndef STM32F4AUDIDRIVER_HPP_
#define STM32F4AUDIDRIVER_HPP_

#include "const.hpp"

#include "stm32f4xx_hal.h"

#include "abstractaudiodriver.hpp"

#include "sigmadeltamodulator.hpp"


//here, just some defines cause i don't care about what the user wants, for now at least
#define STM32F4AD_SR SR192000
#define STM32F4AD_FPB 256
#define STM32F4AD_HALFFPB 128

#define SDM_OSR 2

#define STM32F4_NUMACKS 1





/**
	\brief AudioDriver Implementation for STM32
	This driver is the implementation of the AbstractAudioDriver for STM32 and the IPD2 project.

	It 's clearly dedicated to this project.

	The configuration is the following :
	> 3 stereos inputs in I2S
	> 1 stereo output. This output is actually a PWM, generated by a Sigma Delta Modulator.
		There is 4 PWM, 2 for each channels : one HIGH, one LOW with a LifeTime

	I2S is handle through DMA and buffers, and the PWM is handle by an interruption on each period.


 */
class STM32F4AudioDriver : public AbstractAudioDriver{
	public:
		/**
			\brief configure the peripherals, regarding to the application
		*/
	  	STM32F4AudioDriver(SampleRate sr, uint32_t fpb);
    		virtual ~STM32F4AudioDriver();

		/**
			\brief Start the configured peripherals
			configure I2S, add buffers, etc
			It is compulsory to add the I2S and other peripherals with their config params before calling this method
			*/
	  	virtual uint8_t configure();
	
		/**
	  		\brief Terminate the driver : free memory, etc
		*/
    		virtual uint8_t terminate();

	
		/**
			\brief Start Streams
			*/
	  	virtual uint8_t start();
		
		/**
			\brief Stop Streaming
			*/
    		virtual uint8_t stop();
		
		virtual void process();
		
		inline uint32_t getDMAAck()  { return mDMAAcks;}
		
		/**
			\brief Acknowledge one or more local drivers interuptions
			\note Should be use by the user, but must be public.
			*/
		inline void acknOneDMA() { if(mDMAAcks > 0) mDMAAcks --; }
		

	protected:
		/**
			\brief A low level initialisation for the driver (GPIO, DMA)
			*/
		void mspInit();
	
		/**
			\brief A low level de initialisation
			*/
		void mspDeInit();
	
		/**
			\brief A custom version of HAL_TIM_PWM_Start_IT.
			This function configure two complementary channels of the timer :
	
			> Enable the Capture Compare Channel for x and xN
			> Enable the main Output for x and xN
			*/
		LEStatus TIM_PWM_Start_Channel(TIM_HandleTypeDef *htim, uint32_t Channel);
	
	
		/**
			\brief A custom version of HAL_TIM_PWM_Start_IT
			Instead of starting the timer on The Capture Compare Interruption, like in the HAL,
			The Timer is started and configured for raising an interruption on each Update (end of Period...)
			So the channels will be update at the same time, and will be synchronized.
			*/
		LEStatus TIM_PWM_Start_IT_OnUpdate(TIM_HandleTypeDef *htim);


		/**
		 * \brief A Custom version of HAL_TIM_PWM_Stop_IT to stop only two complementary channels
		 */
		LEStatus TIM_PWM_Stop_Channel(TIM_HandleTypeDef *htim, uint32_t Channel);

		/**
		 * \brief A Custom version of HAL_TIM_PWM_Stop_IT to stop stop the IT on UPDATE
		 */
		LEStatus TIM_PWM_Stop_IT_OnUpdate(TIM_HandleTypeDef *htim);

	protected:
		/**
			* Implemetation
			*/
	
		// ------------------ General -------------------
		volatile uint32_t mDMAAcks;
	
		// ---------------------- I2S --------------------
		//ST STructure
		I2S_HandleTypeDef hi2s1;
		I2S_HandleTypeDef hi2s2;
		I2S_HandleTypeDef hi2s5;
		
		
		// ------------------ PWM and SDM Part -----------
		/**
			\brief Sigma Delta Modulators
			*/
		SigmaDeltaModulator *mSdm1, *mSdm2;
		
		/**
			\brief Pointers on the effective buffers
			Should be Updated during interruptions
			*/
		SDMOutputType *mPWMBuffers[2*AUDIOCONF_MAX_OUTPUT_CHANNELS];
	
		//ST Structures
		TIM_HandleTypeDef htim1;

		TIM_MasterConfigTypeDef sMasterConfig1;
		TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig1;
		TIM_OC_InitTypeDef sConfigOC1;
};


/**
  @}
  */

#endif /* AUDIOCONF_HPP_ */
